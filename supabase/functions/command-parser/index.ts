import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// --- Helper Functions ---

function normalizeOperator(op: string): string {
  const map: { [key: string]: string } = {
    "is greater than": ">",
    "is less than": "<",
    "crosses above": "crosses_above",
    "crosses below": "crosses_below",
    ">": ">",
    "<": "<",
  };
  return map[op.toLowerCase().trim()] || ">";
}

function parseStrategyCommand(command: string) {
  const strategy: any = {
    name: null,
    description: "Generated by AI Assistant",
    symbols: null,
    timeframe: null,
    conditions: [],
  };

  // Extract name (optional, can be generated)
  const nameMatch = command.match(/(?:create|make) a strategy (?:called|named) ['"]?([^'"]+)['"]?/i);
  strategy.name = nameMatch ? nameMatch[1] : `My AI Strategy ${new Date().toLocaleTimeString()}`;

  // Extract symbols
  const symbolMatch = command.match(/for symbol[s]? ([A-Z,\s]+)/i);
  if (symbolMatch) {
    strategy.symbols = symbolMatch[1].split(',').map(s => s.trim()).filter(Boolean);
  }

  // Extract timeframe
  const timeframeMatch = command.match(/on a (\d+[mhd]) timeframe/i);
  strategy.timeframe = timeframeMatch ? timeframeMatch[1] : '15m'; // Default timeframe

  // Extract conditions
  const conditionRegex = /when (the )?(Price|RSI|SMA50|SMA200) (is greater than|is less than|crosses above|crosses below|>|<) (the )?(\d+|Price|RSI|SMA50|SMA200)/gi;
  let match;
  while ((match = conditionRegex.exec(command)) !== null) {
    strategy.conditions.push({
      indicator: match[2],
      operator: normalizeOperator(match[3]),
      value: match[5],
    });
  }

  // Validation
  if (!strategy.symbols || strategy.symbols.length === 0) {
    return { error: "I couldn't find any symbols. Please specify at least one symbol, like 'for symbol AAPL'." };
  }
  if (strategy.conditions.length === 0) {
    return { error: "I couldn't find any conditions. Please add a condition, like 'when RSI < 30'." };
  }

  return { strategy };
}


async function create_strategy(supabase: SupabaseClient, userId: string, args: any) {
  const { error } = await supabase.from('strategies').insert({ ...args, user_id: userId, status: 'stopped' });
  if (error) throw new Error(error.message);
  return `Successfully created the "${args.name}" strategy. You can view and activate it on the Strategies page.`;
}


// --- Main Server Logic ---

serve(async (req) => {
  if (req.method === "OPTIONS") return new Response("ok", { headers: corsHeaders });

  try {
    const { messages } = await req.json();
    if (!messages || messages.length === 0) {
      throw new Error("Missing 'messages' in request body.");
    }
    
    const userMessage = messages[messages.length - 1].content;

    const authHeader = req.headers.get("Authorization");
    if (!authHeader) throw new Error("Missing authorization header.");

    const supabase = createClient(
      Deno.env.get("SUPABASE_URL")!,
      Deno.env.get("SUPABASE_ANON_KEY")!,
      { global: { headers: { Authorization: authHeader } } }
    );
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) throw new Error("Authentication failed.");

    const { strategy, error: parseError } = parseStrategyCommand(userMessage);

    if (parseError) {
      return new Response(JSON.stringify({ reply: parseError.error, success: false }), {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    const result = await create_strategy(supabase, user.id, strategy);

    return new Response(JSON.stringify({ reply: result, success: true }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });

  } catch (error) {
    console.error("Error in command parser:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});