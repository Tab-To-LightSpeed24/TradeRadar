import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient, SupabaseClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// --- Knowledge Base for Trading Questions ---
const knowledgeBase: { [key: string]: string } = {
  "rsi": "The Relative Strength Index (RSI) is a momentum indicator that measures the speed and change of price movements. It is typically used on a 14-period timeframe and is considered overbought when above 70 and oversold when below 30.",
  "sma": "A Simple Moving Average (SMA) is a technical indicator that calculates the average of a selected range of prices, usually closing prices, by the number of periods in that range. For example, SMA50 is the average price over the last 50 periods.",
  "moving average": "A moving average is a stock indicator that is commonly used in technical analysis. The reason for calculating the moving average of a stock is to help smooth out the price data by creating a constantly updated average price.",
  "timeframe": "In trading, a timeframe refers to the period of time that a trader chooses to observe the market. Common timeframes include 1-minute (1m), 15-minute (15m), 1-hour (1h), 4-hour (4h), and 1-day (1d). Shorter timeframes are typically used for scalping, while longer timeframes are used for swing or position trading.",
};

// --- Intent Recognition ---
type Intent = "GREETING" | "CREATE_STRATEGY" | "QUESTION_TRADING_CONCEPT" | "FALLBACK";

function getIntent(message: string): Intent {
  const msg = message.toLowerCase();
  if (/\b(hello|hi|hey|howdy)\b/i.test(msg)) return "GREETING";
  if (/\b(create|build|make)\b.*\b(strategy)\b/i.test(msg)) return "CREATE_STRATEGY";
  if (/\b(what is|what's|define|explain)\b/i.test(msg)) return "QUESTION_TRADING_CONCEPT";
  return "FALLBACK";
}

// --- Command & Question Parsers ---

function normalizeOperator(op: string): string {
  const map: { [key: string]: string } = {
    "is greater than": ">", "is above": ">", "greater than": ">", ">": ">",
    "is less than": "<", "is below": "<", "less than": "<", "<": "<",
    "crosses above": "crosses_above", "crosses below": "crosses_below",
  };
  return map[op.toLowerCase().trim()] || op;
}

function parseStrategyCommand(command: string) {
  const strategy: any = {
    name: null, description: "Generated by AI Assistant",
    symbols: null, timeframe: null, conditions: [],
  };

  const nameMatch = command.match(/(?:name it|named|called) ['"]?([^'"]+)['"]?/i);
  strategy.name = nameMatch ? nameMatch[1].trim() : `AI Strategy - ${new Date().toLocaleTimeString()}`;

  const symbolMatch = command.match(/for (?:symbol[s]?)?([A-Z0-9/,\s]+?)(?: on | when | name |,|$)/i);
  if (symbolMatch) {
    strategy.symbols = symbolMatch[1].split(',').map(s => s.trim()).filter(Boolean);
  }

  const timeframeMatch = command.match(/on (?:a |the )?(\d+(?:m|h|d|hr))/i);
  strategy.timeframe = timeframeMatch ? timeframeMatch[1].replace('hr', 'h') : '15m';

  const conditionsMatch = command.match(/when (.*)/i);
  if (conditionsMatch) {
    const conditionsString = conditionsMatch[1];
    const conditionParts = conditionsString.split(/, and |, | and |,/i);
    const conditionPattern = /^\s*(?:the )?(Price|RSI|SMA50|SMA200)\s*(is greater than|is above|greater than|>|is less than|is below|less than|<|crosses above|crosses below)\s*(?:the )?(\d+|Price|RSI|SMA50|SMA200)\s*$/i;
    for (const part of conditionParts) {
      const match = part.trim().match(conditionPattern);
      if (match) {
        strategy.conditions.push({
          indicator: match[1], operator: normalizeOperator(match[2]), value: match[3],
        });
      }
    }
  }

  if (!strategy.symbols || strategy.symbols.length === 0 || strategy.conditions.length === 0) {
    return { error: "I couldn't fully understand the command. Please use the example format, ensuring you include at least one symbol (e.g., 'for TSLA') and one condition (e.g., 'when RSI is below 30')." };
  }
  return { strategy };
}

// --- Database Interaction ---
async function createStrategyInDB(supabase: SupabaseClient, userId: string, args: any) {
  const { error } = await supabase.from('strategies').insert({ ...args, user_id: userId, status: 'stopped' });
  if (error) throw new Error(error.message);
  return { reply: `Successfully created the "${args.name}" strategy. You can view and activate it on the Strategies page.`, success: true };
}

// --- Intent Handlers ---
async function handleRequest(intent: Intent, message: string, supabase: SupabaseClient, user: any) {
  switch (intent) {
    case "GREETING":
      return { reply: "Hello! How can I help you create a trading strategy today?", success: false };
    
    case "CREATE_STRATEGY":
      const { strategy, error } = parseStrategyCommand(message);
      if (error) return { reply: error, success: false };
      return await createStrategyInDB(supabase, user.id, strategy);

    case "QUESTION_TRADING_CONCEPT":
      const msg = message.toLowerCase();
      for (const key in knowledgeBase) {
        if (msg.includes(key)) {
          return { reply: knowledgeBase[key], success: false };
        }
      }
      return { reply: "I can answer questions about basic terms like RSI, SMA, and timeframe. What would you like to know?", success: false };

    case "FALLBACK":
    default:
      return { reply: "I'm not sure how to help with that. I can create strategies (e.g., 'Create a strategy for AAPL...') or define trading terms (e.g., 'What is RSI?').", success: false };
  }
}

// --- Main Server Logic ---
serve(async (req) => {
  if (req.method === "OPTIONS") return new Response("ok", { headers: corsHeaders });

  try {
    const { messages } = await req.json();
    if (!messages || messages.length === 0) throw new Error("Missing 'messages' in request body.");
    
    const userMessage = messages[messages.length - 1].content;
    const intent = getIntent(userMessage);

    const authHeader = req.headers.get("Authorization");
    if (!authHeader) throw new Error("Missing authorization header.");

    const supabase = createClient(
      Deno.env.get("SUPABASE_URL")!, Deno.env.get("SUPABASE_ANON_KEY")!,
      { global: { headers: { Authorization: authHeader } } }
    );
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) throw new Error("Authentication failed.");

    const response = await handleRequest(intent, userMessage, supabase, user);

    return new Response(JSON.stringify(response), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });

  } catch (error) {
    console.error("Error in command parser:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});